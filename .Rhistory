logret <- diff(log(wilsh))[-1]
#--------------------------
library(moments)
rvec <- as.vector(logret)
paste("skewness")
round(skewness(rvec),2)
#---------------------------
library(moments)
rvec <- as.vector(logret)
paste("kurtosis")
round(kurtosis(rvec),2)
#---------------------------
library(moments)
rvec <- as.vector(logret)
paste("Jarque")
jarque.test(rvec)
getSymbols("GOLDPMGBD228NLBM",src="FRED")
wilsh <- na.omit(WILL5000IND)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
getSymbols("GOLDPMGBD228NLBM",src="FRED")
wilsh <- na.omit(GOLDPMGBD228NLBM)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
rvec <- as.vector(logret)
paste("skewness")
round(skewness(rvec),2)
rvec <- as.vector(logret)
paste("kurtosis")
round(kurtosis(rvec),2)
#---------------------------
library(moments)
rvec <- as.vector(logret)
paste("Jarque")
jarque.test(rvec)
library(MASS)
rvec <- as.vector(logret)
t.fit <- fitdistr(rvec, “t”)
round(t.fit$estimate,6)
t.fit <- fitdistr(rvec, "t")
round(t.fit$estimate,6)
alpha <- 0.05
set.seed(123789)
library(metRology)
rvec <- rt.scaled(100000,mean=t.fit$estimate[1],sd=t.fit$estimate[2],df=t.fit$estimate[3])
VaR <- quantile(rvec,alpha)
ES <- mean(rvec[rvec<VaR])
paste("VaR: ")
round(VaR,6)
paste("ES: ")
round(ES,6)
install.packages("metRology")
library(metRology)
rvec <- rt.scaled(100000,mean=t.fit$estimate[1],sd=t.fit$estimate[2],df=t.fit$estimate[3])
VaR <- quantile(rvec,alpha)
ES <- mean(rvec[rvec<VaR])
paste("VaR: ")
round(VaR,6)
paste("ES: ")
round(ES,6)
library(quantmod)
getSymbols("DEXJPUS",src="FRED")
wilsh <- na.omit(GOLDPMGBD228NLBM)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
getSymbols("DEXJPUS",src="FRED")
jan <- na.omit(GOLDPMGBD228NLBM)
jan <- wilsh["1979-12-31/2017-12-31"]
jan <- 1/jan
names(jan) <- "TR"
logret <- diff(log(jan))[-1]
class(jan)
rvec <- as.vector(logret)
paste("skewness")
round(skewness(rvec),2)
getSymbols("DEXJPUS",src="FRED")
jan <- na.omit(GOLDPMGBD228NLBM)
jan <- jan["1979-12-31/2017-12-31"]
jan <- 1/jan
names(jan) <- "TR"
logret <- diff(log(jan))[-1]
######################################
# Skewness
rvec <- as.vector(logret)
paste("skewness")
round(skewness(rvec),2)
paste("kurtosis")
round(kurtosis(rvec),2)
jarque.test(rvec)
getSymbols("GOLDPMGBD228NLBM",src="FRED")
wilsh <- na.omit(GOLDPMGBD228NLBM)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
#-----------------------------------------
# data vs normal distribution
#-----------------------------------------
#--------------------------
library(moments)
rvec <- as.vector(logret)
paste("skewness")
round(skewness(rvec),2)
#---------------------------
library(moments)
rvec <- as.vector(logret)
paste("kurtosis")
round(kurtosis(rvec),2)
#---------------------------
rvec <- as.vector(logret)
paste("Jarque")
jarque.test(rvec)
getSymbols("DEXJPUS",src="FRED")
jan <- na.omit(GOLDPMGBD228NLBM)
jan <- jan["1979-12-31/2017-12-31"]
jan <- 1/jan
names(jan) <- "TR"
logret <- diff(log(jan))[-1]
######################################
# Skewness
rvec <- as.vector(logret)
paste("skewness")
round(skewness(rvec),2)
#Kurtosis
paste("kurtosis")
round(kurtosis(rvec),2)
#JB
jarque.test(rvec)
getSymbols("DEXJPUS",src="FRED")
jan <- na.omit(DEXJPUS)
jan <- jan["1979-12-31/2017-12-31"]
jan <- 1/jan
names(jan) <- "TR"
logret <- diff(log(jan))[-1]
######################################
# Skewness
rvec <- as.vector(logret)
paste("skewness")
round(skewness(rvec),2)
#Kurtosis
paste("kurtosis")
round(kurtosis(rvec),2)
#JB
jarque.test(rvec)
#Estimae parameters
library(MASS)
rvec <- as.vector(logret)
t.fit <- fitdistr(rvec, "t")
round(t.fit$estimate,6)
#calculate VaR and ES
alpha <- 0.05
set.seed(123789)
library(metRology)
rvec <- rt.scaled(100000,mean=t.fit$estimate[1],sd=t.fit$estimate[2],df=t.fit$estimate[3])
VaR <- quantile(rvec,alpha)
ES <- mean(rvec[rvec<VaR])
paste("VaR: ")
round(VaR,6)
paste("ES: ")
round(ES,6)
alpha <- 0.01
set.seed(123789)
library(metRology)
rvec <- rt.scaled(100000,mean=t.fit$estimate[1],sd=t.fit$estimate[2],df=t.fit$estimate[3])
VaR <- quantile(rvec,alpha)
ES <- mean(rvec[rvec<VaR])
paste("VaR: ")
round(VaR,6)
paste("ES: ")
round(ES,6)
RNGkind(sample.kind=”Rounding”)
alpha <- 0.01
set.seed(123789)
rvec <- rep(0,100000)
for (i in 1:10) {
rvec <- rvec+rt.scaled(100000,mean=t.fit$estimate[1],sd=t.fit$estimate[2],df=t.fit$estimate[3])
}
VaR <- quantile(rvec,alpha)
ES <- mean(rvec[rvec<VaR])
VaR
ES
round(-0.05543493,6)
alpha <- 0.01
set.seed(123789)
rvec <- rep(0,100000)
for (i in 1:10) {
rvec <- rvec+ sample(as.vector(logret),100000,replace=TRUE)
}
VaR <- quantile(rvec,alpha)
ES <- round( mean(rvec[rvec<VaR]),6)
ES
set.seed(123789)
rdat <- as.vector(logret)
rvec <- rep(0,100000)
posn <- seq(from=1,to=length(rdat)-9,by=1)
rpos <- sample(posn,100000,replace=TRUE)
for (i in 1:10) {
rvec <- rvec+ rdat[rpos]
rpos <- rpos+1
}
VaR <- quantile(rvec,alpha)
ES <- mean(rvec[rvec<VaR])
ES
getSymbols("DEXJPUS",src="FRED")
jan <- na.omit(DEXJPUS)
jan <- jan["1979-12-31/2017-12-31"]
head(jan)
jan <- 1/jan
names(jan) <- "TR"
logret <- diff(log(jan))[-1]
head(logret)
round(0.0077284980,6)
getSymbols("DEXJPUS",src="FRED")
jan <- na.omit(DEXJPUS)
jan <- jan["1979-12-31/2017-12-31"]
jan <- 1/jan
head(jan)
names(jan) <- "TR"
logret <- diff(jan)[-1]
head(logret)
getSymbols("DEXJPUS",src="FRED")
jan <- na.omit(DEXJPUS)
jan <- jan["1979-12-31/2017-12-31"]
jan <- 1/jan
names(jan) <- "TR"
logret <- diff(jan)[-1]
head(jan)
round(0.004161465,6)
getSymbols("DEXJPUS",src="FRED")
jan <- na.omit(DEXJPUS)
jan <- jan["1979-12-31/2017-12-31"]
jan <- 1/jan
names(jan) <- "TR"
logret <- diff(log(jan))[-1]
logret.q <- apply.quarterly(logret,sum)
tail(logret.q)
round(-0.0004437936,6)
logret.y <- apply.yearly(logret,sum)
tail(logret.y)
ret.y <- exp(logret.y)-1
tail(ret.y)
round(0.036294259,6)
acf(logret)
install.packages("r2dii.match")
remotes::update_packages("r2dii.data", upgrade = "ask")
library(r2dii.data)
library(r2dii.match)
match_result <- match_name(loanbook_demo, ald_demo)
prioritize(match_result)
head(data_dictionary)
unique( data_dictionary$dataset)
lengths(unique( data_dictionary$dataset) )
length(unique( data_dictionary$dataset) )
library(pacta)
install.packages(c("config", "reshape2"))
source('C:/Users/sabba/OneDrive/Bureau/Doc Stage/code/code imene/Pf_results_source.R', echo=TRUE)
ALD.asset <- ald_demo
distinct_assets <- ALD.asset %>% distinct(ALD.Name, Sector, Technology, ALD.Asset.Location)
names( ALD.asset)
ALD.asset <- ald_demo
ALD.Name = name_company
ALD.Asset.Location = country_of_domicile
distinct_assets <- ALD.asset %>% distinct(ALD.Name, Sector, Technology, ALD.Asset.Location)
ALD.Name <- name_company
ALD.Asset.Location <- country_of_domicile
distinct_assets <- ALD.asset %>% distinct(ALD.Name, Sector, Technology, ALD.Asset.Location)
ALD.asset <- ald_demo
ALD.Name  <- "name_company"
ALD.Asset.Location <- "country_of_domicile"
distinct_assets <- ALD.asset %>% distinct(ALD.Name, Sector, Technology, ALD.Asset.Location)
names( ALD.asset )
names( ALD.asset )[5,8]
names( ALD.asset )[c(5,8)]
ALD.asset <- ald_demo
names( ALD.asset )[c(1,8)] <- c("ALD.Name","country_of_domicile")
distinct_assets <- ALD.asset %>% distinct(ALD.Name, Sector, Technology, ALD.Asset.Location)
ALD.asset <- ald_demo
names( ALD.asset )[c(1,8)] <- c("ALD.Name","ALD.Asset.Location")
distinct_assets <- ALD.asset %>% distinct(ALD.Name, sector, technology, ALD.Asset.Location)
colnames(loanbook_demo)
#################
colnames(loanbook_demo)
loanbook <- loanbook_demo
loanbook2 <- loanbook %>% select(LB_GROUPE_AFFAIRE, CD_PAYS_GA,
CD_SECTEUR_ACTIVITE_GA, LB_RAISON_SOCIALE, CD_LEI,
CD_SECTEUR_ACTIVITE, CD_PAYS_BUSINESS, MT_EXPO)
match_result2 <- matchNames(loanbook_demo, ald_demo)
dim(mathc_result2)
dim(match_result2)
dim(match_result)
head(loanbook_demo)
devtools::install_github("2DegreesInvesting/r2dii")
update.packages()
library(r2dii)
devtools::install_github("2DegreesInvesting/r2dii.utils")
packrat::init("C:\Users\sabba\OneDrive\Bureau\Doc Stage\code\My code")
packrat::init("C:/Users/sabba/OneDrive/Bureau/Doc Stage/code/My code")
install.packages("packrat")
packrat::init("C:/Users/sabba/OneDrive/Bureau/Doc Stage/code/My code")
getwd()
devtools::install_github("2DegreesInvesting/r2dii.utils")
library(r2dii.utils)
library(r2dii.data)
library(r2dii.match)
install.packages(c("tidyr", "dplyr", "scales", "reshape2", "tidyverse", "readxl", "tidyselect" ))
install.packages(c("tidyr", "dplyr", "scales", "reshape2", "tidyverse", "readxl", "tidyselect"))
str(alaeddine)
toString( alaeddine)
install.packages(c( "grid",  "ggthemes", "reshape2", "gridExtra", "scales", "stringr", "extrafont", "tidyr", "knitr", "RColorBrewer",
"matrixStats", "rworldmap", "ggmap", "cowplot", "ggrepel", "readxl",
"tidyverse", "ggforce", "sitools" , "countrycode"))
match_result <- match_name(loanbook_demo, ald_demo)
getwd()
packrat::init("C:/Users/sabba/OneDrive/Bureau/Doc Stage/code/My code")
library(r2dii.data)
library(r2dii.utils)
library(r2dii.match)
match_result <- match_name(loanbook_demo, ald_demo)
source("0_portfolio_test.R")
getwd()
source("0_portfolio_test.R")
source("0_graphing_functions.R")
source("0_reporting_functions.R")
source("0_portfolio_input_check_functions.R")
source("0_global_functions.R")
source("0_sda_approach.R")
r2dii.data
write.csv2(loanbook_demo, "loanbook_demo.csv")
write.csv2(ald_demo, "loanbook_demo.csv")
write.csv2(loanbook_demo, "loanbook_demo.csv")
write.csv2(ald_demo, "ald_demo.csv")
## Project Initialisation
rm(list=ls())
options(encoding = "UTF-8")
library(tidyr)
library(dplyr)
library(scales)
library(reshape2)
library(tidyverse)
library(readxl)
library(tidyselect)
if (rstudioapi::isAvailable()) {
working_location <- dirname(rstudioapi::getActiveDocumentContext()$path)
} else {
working_location <- getwd()
}
working_location <- paste0(working_location, "/")
setwd(working_location)
library(r2dii.utils)
source("0_portfolio_test.R")
source("0_graphing_functions.R")
source("0_reporting_functions.R")
source("0_portfolio_input_check_functions.R")
source("0_global_functions.R")
source("0_sda_approach.R")
project_name <- "Offline_test"
twodii_internal <- FALSE
# TRUE or FALSE: TRUE means that the code is running on a 2dii laptop with dropbox connection
#####################################################################
###ONLY FOR EXTERNAL PROJECTS (twodii_internal <- FALSE):
# Variables must exist for internal projects
project_location_ext <- "C:/Users/sabba/OneDrive/Bureau/Doc Stage/code/My code/data/output"
data_location_ext <- "C:/Users/sabba/OneDrive/Bureau/Doc Stage/code/My code/data/input"
#####################################################################
create_project_folder(project_name, twodii_internal, project_location_ext)
set_project_paths(project_name, twodii_internal, project_location_ext)
copy_files(project_name)
options(r2dii_config = paste0(par_file_path,"/AnalysisParameters.yml"))
set_global_parameters(paste0(par_file_path,"/AnalysisParameters.yml"))
analysis_inputs_path <- set_analysis_inputs_path(twodii_internal, data_location_ext, dataprep_timestamp)
library(quantmod)
getSymbols("WILL5000IND",src="FRED")
wilsh <- na.omit(WILL5000IND)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
acf(logret)
acf( abs(logret) )
library(rugarch)
uspec <- ugarchspec( variance.model = list(model = "sGARCH",garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
fit.garch <- ugarchfit(spec = uspec, data = logret[,1])
save1 <- cbind( logret[,1], fit.garch@fit$sigma, fit.garch@fit$z )
names(save1) <- c( “logret”, “s”, “z” )
acf(save1$z)
acf(abs(save1$z))
library(quantmod)
getSymbols("WILL5000IND",src="FRED")
wilsh <- na.omit(WILL5000IND)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
acf(logret)
acf( abs(logret) )
library(rugarch)
uspec <- ugarchspec( variance.model = list(model = "sGARCH",garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
fit.garch <- ugarchfit(spec = uspec, data = logret[,1])
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
getSymbols("WILL5000IND",src="FRED")
wilsh <- na.omit(WILL5000IND)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
acf(logret)
acf( abs(logret) )
library(rugarch)
uspec <- ugarchspec( variance.model = list(model = "sGARCH",garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
fit.garch <- ugarchfit(spec = uspec, data = logret[,1])
install.packages("rugarch")
library(quantmod)
getSymbols("WILL5000IND",src="FRED")
wilsh <- na.omit(WILL5000IND)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
acf(logret)
acf( abs(logret) )
library(rugarch)
uspec <- ugarchspec( variance.model = list(model = "sGARCH",garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
fit.garch <- ugarchfit(spec = uspec, data = logret[,1])
save1 <- cbind( logret[,1], fit.garch@fit$sigma, fit.garch@fit$z )
names(save1) <- c( “logret”, “s”, “z” )
acf(save1$z)
acf(abs(save1$z))
save1 <- cbind( logret[,1], fit.garch@fit$sigma, fit.garch@fit$z )
names(save1) <- c( "logret", "s", "z" )
acf(save1$z)
acf(abs(save1$z))
acf(save1$z)
acf( abs(logret) )
library(quantmod)
getSymbols("GOLDPMGBD228NLBM",src="FRED")
wilsh <- na.omit(WILL5000IND)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
logret <- diff(log(wilsh))[-1]
acf(logret)
acf( abs(logret) )
161
library(rugarch)
uspec <- ugarchspec( variance.model = list(model = "sGARCH",garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
fit.garch <- ugarchfit(spec = uspec, data = logret[,1])
save1 <- cbind( logret[,1], fit.garch@fit$sigma, fit.garch@fit$z )
names(save1) <- c( "logret", "s", "z" )
fit.garch@fit$alpha1
fit.garch@fit$alpha2
fit.garch@fit$beta1
fit.garch@fit$shape
fit.garch@fit$beta1
fit.garch@fit$sigma
fit.garch$sigma
save1 <- cbind( logret[,1], fit.garch@fit$sigma, fit.garch@fit$z )
names(save1) <- c( "logret", "s", "z" )
acf(save1$z)
acf(abs(save1$z))
library(quantmod)
getSymbols("DEXJPUS",src="FRED")
wilsh <- na.omit(DEXJPUS)
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
wilsh <- 1/wilsh
logret <- diff(log(wilsh))[-1]
uspec <- ugarchspec( variance.model = list(model = "sGARCH",garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
fit.garch <- ugarchfit(spec = uspec, data = logret[,1])
fit.garch@fit$alpha1
fit.garch@fit$coef
round(fit.garch@fit$coef,6)
seed(123789)
set.seed(123789)
RNGkind(sample.kind=”Rounding”)
RNGkind(sample.kind="Rounding")
set.seed(123789)
boot.garch <- ugarchboot(fit.garch,
method=c("Partial","Full")[1], # ignore parameter uncertainty
sampling="raw", # draw from standardized residuals
n.ahead=1, # 1-day ahead
n.bootpred=100000, # number of simulated outcomes
solver="solnp”)
boot.garch <- ugarchboot(fit.garch,
method=c("Partial","Full")[1], # ignore parameter uncertainty
sampling="raw", # draw from standardized residuals
n.ahead=1, # 1-day ahead
n.bootpred=100000, # number of simulated outcomes
solver="solnp" )
boot.garch <- ugarchboot(fit.garch,
method=c("Partial","Full")[1], # ignore parameter uncertainty
sampling="raw", # draw from standardized residuals
n.ahead=1, # 1-day ahead
n.bootpred=100000, # number of simulated outcomes
solver="solnp" )
rvec <- boot.garch@fseries
VaR <- quantile(rvec,0.05)
ES <- mean(rvec[rvec<VaR])
VaR
round(VaR,6)
ES
round(ES,6)
