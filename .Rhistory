select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate( agecat = cut( Age, c(0,15,50,150), labels = c("Under 15", "15 to 50", "Over 50")))
head( titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate( agecat = cut( Age, c(0,14.99,49.99,150), labels = c("Under 15", "15 to 50", "Over 50")))
head( titanic_3)
submit()
submit()
skip()
submit()
called regular_expression <- "a"
regular_expression <- "a"
string_to_search <- "Maryland"
grepl(regular_expression,string_to_search )
grepl("ryla", "Maryland")
grepl("Marly", "Maryland")
head(state.name)
grepl(".", "Maryland")
grepl(".", "")
grepl("a.b", c("aaa",
| "aab", "abb", "acadb"))
grepl("a.b", c("aaa",
"aab", "abb", "acadb"))
grepl("a+", "Maryland")
grepl("a*", "Maryland")
grepl("x*", "Maryland")
grepl( "a{2}","Mississippi" )
grepl("s{2}", "Mississippi")
grepl("s{2,3}", "Mississippi")
grepl("i{2,3}", "Mississippi")
grepl("(iss){2}", "Mississippi")
grepl("\\d", "0123456789")
repl("\\D", "0123456789")
grepl("\\D", "0123456789")
grepl(".", "rhythms")
grepl( "[aeiou]", " rhythms")
grepl( "[aeiou]", "rhythms")
grepl("\\" ,"http://www.jhsph.edu/")
grepl("\\." ,"http://www.jhsph.edu/")
grepl("^a", c("bab", "aab"))
grepl("b$", c("bab", "aab"))
grepl("a|b", c("abc", "bcd", "cde"))
start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$"
vowel_state_lgl <-
grepl(start_end_vowel, state.name)
state.name[ vowel_state_lgl]
grepl("[Ii]", c("Hawaii", "Illinois", "Kentucky"))
rep("[Ii]",
| c("Hawaii", "Illinois", "Kentucky"))
rep("[Ii]",
c("Hawaii", "Illinois", "Kentucky"))
rep("[Ii]", c("Hawaii", "Illinois", "Kentucky") )
grep("[Ii]", c("Hawaii", "Illinois", "Kentucky") )
sub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
gsub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
two_s <- state.name[grep("ss", state.name)]
two_s
strsplit(two_s, "ss")
str_extract("Camaro Z28", "[0-9]+")
?str_extract
str_order(c("p", "e", "n", "g"))
str_pad("Thai", width = 8, side = "left", pad = "-")
str_to_title(c("CAPS", "low", "Title"))
str_trim(" trim me ")
word("See Spot run.", 2)
library(ggplot2)
library(faraway)
data(nepali)
head(nepali, 3)
ggplot( nepali, aes(x= wt , y =ht ) +
geom_point()
)
ggplot( nepali, aes(x= wt , y =ht )) +
geom_point()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot( nepali, aes(x= wt , y =ht )) +
geom_point()
ggplot( nepali, aes(x= wt , y =ht,
color = id )) +
geom_point()
ggplot( nepali, aes(x= wt , y =ht,
color = factor(id) )) +
geom_point()
ggplot( nepali, aes(x= wt , y =ht,
color = factor(id) )) +
geom_point()
data(trees)
head(trees)
trees %>% ggplot( aes = ( Gurth, Height, size = Volume)) + geom_point()
trees %>% ggplot( aes = ( Girth, Height, size = Volume)) + geom_point()
trees %>% ggplot( aes = ( x= Girth, y= Height, size = Volume)) + geom_point()
trees %>% ggplot( aes ( x= Girth, y= Height, size = Volume)) + geom_point()
library(readr)
trees %>% ggplot( aes ( x= Girth, y= Height, size = Volume)) + geom_point()
library(faraway)
trees %>% ggplot( aes ( x= Girth, y= Height, size = Volume)) + geom_point()
library(tidyr)
trees %>% ggplot( aes ( x= Girth, y= Height, size = Volume)) + geom_point()
trees %>% ggplot( aes ( x= Girth, y= Height, size = Volume, color = volume)) + geom_point()
trees %>% ggplot( aes ( x= Girth, y= Height, size = Volume, color = Volume)) + geom_point()
ggplot() +
geom_point(trees,
aes(x = Girth, y = Height, size = Volume))
ggplot() +
geom_point(trees,
aes(x = Girth, y = Height, size = Volume))
ggplot() +  geom_point(trees,
aes(x = Girth, y = Height, size = Volume))
ggplot() +  geom_point(data = trees,
aes(x = Girth, y = Height, size = Volume))
ggplot(trees) +  geom_point(aes(x = Girth, y = Height, size = Volume))
ggplot(trees) +  geom_point(aes(x = Girth, y = Height, size = Volume)) + geom_smooth(method = "lm")
ggplot(trees) +  geom_point(aes(x = Girth, y = Height, size = Volume)) + geom_smooth(Height ~ Height, method = "lm")
ggplot(trees) +  geom_point(aes(x = Girth, y = Height, size = Volume)) + geom_smooth(Height ~ Height)
ggplot(trees) +  geom_point(aes(x = Girth, y = Height, size = Volume)) + geom_smooth(aes ( Height,Height))
ggplot(trees) +  geom_point( es(x = Girth, y = Height, size = Volume)) + geom_smooth(method = lm)
ggplot(trees) +  geom_point( es(x = Girth, y = Height, size = Volume)) + geom_smooth(method = Girth)
trees %>%
ggplot(aes(x = Girth, y = Height, size = Volume)) +
geom_point()
trees %>%
ggplot(aes(x = Girth, y = Height, size = Volume)) +
geom_point() +
geom_smooth(method = lm)
trees %>%
ggplot(aes(x = Girth, y = Height)) +
geom_point(aes(size = Volume))
trees %>%
ggplot() +
geom_point(x = Girth, y = Height, size = Volume)
ggplot() +
geom_point(data = trees,
aes(x = Girth, y = Height, size = Volume))
trees %>%
ggplot(aes(x = Girth, y = Height)) +
geom_point(size = Volume)
library(ggplot2)
us_map <- map_data("state")
head(us_map, 3)
install.packages("maps")
us_map <- map_data("state")
head(us_map, 3)
us_map %>%
filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black")
library(tidyr)
us_map %>%
filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black")
us_map %>%
filter(region == alabama     ) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black")
us_map %>%
filter(region == "alabama"     ) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black")
library(faraway)
data(worldcup)
library(plotly)
plot_ly(worldcup, type = "scatter",
x = ~ Time, y = ~ Shots, color = ~ Position)
install.packages("plotly")
library( datasets)
data(car)
data(cars)
state <- data.frame(state.x77,
region = state.region )
xyplot(Life.Exp ~Income |
region, data = state, layout = c(4,1))
library(lattice)
state <- data.frame(state.x77,
region = state.region )
xyplot(Life.Exp ~Income |
region, data = state, layout = c(4,1))
?par
x<- rnorm(10)
hist(x)
x<- rnorm(1000)
hist(x)
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("jpeg")
swirl()
library(swirl)
swirl()
?Devices
plot(eruption, waiting)
plot(eruptions, waiting)
plot(faithful$eruptions, waiting)
head(faithful)
plot(faithful$eruptions, waiting)
with(faithful, plot( eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot( eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot( eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist ))
text(x = mean(cars$speed) , y = max(cars$dist), SWIRL rules! )
text(x = mean(cars$speed) , y = max(cars$dist), text = SWIRL rules! )
?text
text(x = mean(cars$speed) , y = max(cars$dist), labels = "SWIRL rules!" )
head(state)
table(state$region)
xyplot( Life.Exp ~ Income | region, layout = c(4,1))
xyplot( Life.Exp ~ Income | region, data = state layout = c(4,1))
xyplot( Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot( Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
mpg$model
table(mpg$model)
qplot( x= disp, y = hwy, data = mpg)
TRUE
qplot( x= displ, y = hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot( Ozone~Month, airquality)
boxplot( Ozone~Month, airquality, xlab = "Month", ylab = "ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red", main = "Ozone
and Wind in New York City" )
title(main="Ozone and Wind in New York City")
with(airquality, plot( wind, ozone))
with(airquality, plot( Wind, Ozone))
title( main = "Ozone and Wind in New York City")
par()
length(par())
names(par())
?par
par()$spin
par()$pin
par("fg")
par("pch")
par("lty")
TRUE
plot(airquality$Wind, type="n",airquality$Ozone)
title( main = "Ozone and Wind in NYC")
title(main="Wind and Ozone in NYC")
may <- subset( airquality, month == 5 )
may <- subset( airquality, Month == 5 )
points(may$Wind, may$Ozone )
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset( airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=15)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
TRUE
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v = median (airquality$Wind), lty = 2, lwd = 2 )
par(mfrow = c(1,2))
with (airquality, plot( wind, Ozone, main = "Ozone and Wind" ) )
with (airquality, plot( Wind, Ozone, main = "Ozone and Wind" ) )
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot( x = airquality$Ozone,  y = airquality$Solar, main = "Ozone and Solar Radiation" )
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar =
| c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1, 3), mar =  c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation"
)
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Solar Radiation" )
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext( "Ozone and Weather in New York City", outer = TRUE)
install.packages("knitr")
install.packages("devtools")
devtools::install_github(repo = "2DegreesInvesting/pacta")
install.packages("roxygen2")
test_that("trigonometric functions match identities", {
expect_equal(sin(pi / 4), 1 / sqrt(2))
expect_equal(cos(pi / 4), 1 / sqrt(2))
expect_equal(tan(pi / 4), 1)
})
library(pacta)
pacta::data.name.reductions
pacta::data.ownership.types
simplifyName("Acuity Brands Inc")
substituteF ("Acuity Brands Inc" )
substituteF <- function(text, abr) {
from <- abr[1]
to <- abr[2]
gsub(from, to, text, fixed = T)
}
?gsub
from = "Aladin"
to = "Ala"
text = " Aladin went to BNP for work."
gsub(from, to, text, fixed = T)
gsub(from, to, text)
text = " Aladinwent to BNP for work."
gsub(from, to, text)
gsub(from, to, text, fixed = T)
text = " Aladine went to BNP for work."
gsub(from, to, text, fixed = T)
gsub(from, to, text)
stringi::stri_trans_general("cleanName", "any-latin")
stringi::stri_trans_general("clean56Name", "any-latin")
stringi::stri_trans_general("clean56Naéme", "any-latin")
stringi::stri_trans_general("clean56Naéme", "latin-ascii")
?Reduce
?gsub
gsub("(?<=\\s[a-z]{1}) (?=[a-z]{1})", "", "cleanName", perl = TRUE)
gsub("(?<=\\s[a-z]{1}) (?=[a-z]{1})", "", "cleanName (?=[a-z]{1})", perl = TRUE)
gsub("(?<=\\s[a-z]{1}) (?=[a-z]{1})", "", "cleanName (?<=\\s[a-z]{1}) (?=[a-z]{1})", perl = TRUE)
gsub("(?<=\\s[a-z]{1}) (?=[a-z]{1})", "", "(?<=\\s[a-z]{1}) (?=[a-z]{1})", perl = TRUE)
gsub("([a-z]{1})", "", "aladin", perl = TRUE)
gsub("(?<=\\s[a-z]{1})", "", "(?<=\\s[a-z]{1}) (?=[a-z]{1})", perl = TRUE)
gsub("(?<=\\s[a-z]{1})", "", "aladin", perl = TRUE)
gsub("(?<=\\s[a-z])", "", "aladin", perl = TRUE)
gsub("[?<=\\s[a-z]]", "", "aladin", perl = TRUE)
gsub("[a-z]", "", "aladin", perl = TRUE)
gsub("[a-z]", "", "aladin", perl = TRUE)
gsub("'.*)(?<=\\s[a-z])", "", "aladin", perl = TRUE)
gsub("(.*)(?<=\\s[a-z])", "", "aladin", perl = TRUE)
gsub("(.*)(?<=\\s[a-z])(.*)", "", "aladin", perl = TRUE)
gsub("(b) (a)", "", "aladin", perl = TRUE)
gsub("(a)", "", "aladin", perl = TRUE)
gsub("(a)(l)", "", "aladin", perl = TRUE)
gsub("([a-z])(l)", "", "aladin", perl = TRUE)
gsub("([a-z])", "", "aladin", perl = TRUE)
gsub("([a-z]) (f)", "", "aladin", perl = TRUE)
gsub("([a-z])(f)", "", "aladin", perl = TRUE)
[a-z]
"[a-z]"
#------------------------------------------------------------------------------------------
#---------------- Simplify customer name --------------------------------------------------
#------------------------------------------------------------------------------------------
#'
#' @description Takes customer name and simplifies it by
#' converting to lower case; converting to latin-ascii characters;
#' converting ownership types to standard abbreviations.
#'
#' @return Character string with simplified name
#'
#' @export
#' @param name text string to simplify
#' @param cut.ownership flag that defines whether ownership type (like llc)
#'   should be cut-off from name during simplification
#' @param reduction data frame with reduction rules to be applied, contains
#'   columns From (for initial values) and To (for resulting values)
#' @param ownership vector of company ownership types to be disctinguished
#'   for cut-off or separation
#'
#' @examples
#' simplifyName("Acuity Brands Inc")
#' simplifyName(c("3M Company", "Abbott Laboratories", "AbbVie Inc.", "Accenture plc"))
simplifyName <- function(
name,
cut.ownership = FALSE,
reduction = pacta::data.name.reductions,
ownership = pacta::data.ownership.types
) {
# replace long words with abbreviations: replaces what is in "from" to what is in "to" in "text".
substituteF <- function(text, abr) {
from <- abr[1]
to <- abr[2]
gsub(from, to, text, fixed = T) # replaces "from" to "to" in "text"
}
substituteR <- function(text, abr) {
from <- abr[1]
to <- abr[2]
gsub(from, to, text)
}
replacements <-  list(
c(".", " "),
c(",", " "),
#c("-", " "),
c("_", " "),
c("/", " "),
c("$", "")
)
# convert dataframe "reductions" into list of abbreviation rules (From -> To )
# returns : pairs c(from,to)
abbreviations <- mapply(
c, tolower(reduction$From), tolower(reduction$To),
SIMPLIFY = FALSE, USE.NAMES = FALSE
)
ownerships <- Map(
f = function(x) {
if (cut.ownership) c(paste0(" ", x, "$"), "")
else c(paste0(" ", x, "$"), paste0("$", x))
},
ownership
)
cleanName <- name
# turn text to lowercase and translate to only base latin characters
cleanName <- tolower(cleanName)
cleanName <- stringi::stri_trans_general(cleanName, "any-latin")
cleanName <- stringi::stri_trans_general(cleanName, "latin-ascii")
# substitute words in text using list of replacements
cleanName <- Reduce(f = substituteF, x = replacements, init = cleanName)
# keep only one space between words
cleanName <- gsub("[[:space:]]+", " ", cleanName)
# substitute words in text using list of abbreviations
cleanName <- Reduce(f = substituteF, x = abbreviations, init = cleanName)
# trim redundant whitespaces
cleanName <- trim(cleanName)
# ?
cleanName <- gsub("(?<=\\s[a-z]{1}) (?=[a-z]{1})", "", cleanName, perl = TRUE)
# ownership type distinguished (with $ sign) in company name
cleanName <- Reduce(f = substituteR, x = ownerships, init = cleanName)
# final adjustments. Why not implemented above?
cleanName <- gsub("-", " ", cleanName)
cleanName <- gsub("[[:space:]]", "", cleanName)
cleanName <- gsub("[^[:alnum:][:space:]$]","",cleanName)
cleanName <- gsub("$"," ", cleanName, fixed = T)
return(cleanName)
}
simplifyName("Aladin Sabbagh 95 tgrf")
?trim
trim("Aladin Sabbagh 95 tgrf")
trim("Aladin")
a <- "Aladin "
trim(a)
str(trim)
str(trim())
trim <- function(x) trimws(x, which = "both")
trim("Aladin")
trim("Aladin   ")
x <- 5
duplicated(x)
x <- c(5,5,1,2,1)
duplicated(x)
x %in% duplicated(x)
require(devtools)
devtools::install_github(repo="2DegreesInvesting/pacta")
source("Pf_results_source.R")
?source
loanbook <- loanbook %>% filter(Code_Sector != "CD020020")
bridge <- read.csv2("./DataInput/2019-12-11/manual-input/bridge.csv", stringsAsFactors = F)
distinct_assets <- ALD.asset %>% distinct(ALD.Name, Sector, Technology, ALD.Asset.Location)
install.packages("./R/pacta/pacta", repos=NULL, type="source")
library('"pacta', lib.loc=)
getwd()
colnames(loanbook4)
loanbook <- loanbook %>% filter(Code_Sector != "CD020020")
?addALD4matching
process.prepALD4match <- function(ald) {
# assets and companies
all <- ald %>%
subset(
select = c("ALD.link.Level", "ALD.Name", "Sector")
) %>%
unique()
addALD4matching(
levels     = all$ALD.link.Level,
ids        = all$ALD.Name,
values     = all$ALD.Name,
sectors    = all$Sector,
simplify = T
)
}
devtools::create("C:/Users/sabba/OneDrive/Bureau/R package/Assignement 2/w4")
devtools::create("C:/Users/sabba/OneDrive/Bureau/R package/Assignement 2/w4")
devtools::create("C:/Users/sabba/OneDrive/Bureau/R package/Assignement 2/w4")
devtools::create("C:/Users/sabba/OneDrive/Bureau/R package/Assignement 2/funacka")
devtools::create(r"C:/Users/sabba/OneDrive/Bureau/R package/Assignement 2/funacka")
devtools::create(r"C:\Users\sabba\OneDrive\Bureau")
devtools::create("C:\Users\sabba\OneDrive\Bureau")
getwd()
devtools::create("C:/Users/sabba/OneDrive/Bureau/R package/Assignement 2/funacka")
devtools::create("./Bureau/R package/Assignement 2/funacka")
devtools::create("../Bureau/R package/Assignement 2/funacka")
savehistory("C:/Users/sabba/OneDrive/Bureau/his.Rhistory")
setwd(dir = "C:\Users\sabba\OneDrive\Bureau\Coursera courses\R learning\R package\Assignement 2\funacka")
setwd(dir = u"C:\Users\sabba\OneDrive\Bureau\Coursera courses\R learning\R package\Assignement 2\funacka")
setwd(dir = r"C:\Users\sabba\OneDrive\Bureau\Coursera courses\R learning\R package\Assignement 2\funacka")
x<- "C:\Users\sabba\OneDrive\Bureau\Coursera courses\R learning\R package\Assignement 2\funacka"
x<- "C:\Users\sabba\OneDrive\Bureau\Coursera courses\R learning\R package\Assignement 2\funacka"
x<- "C:\\Users\\sabba\\OneDrive\\Bureau\\Coursera courses\\R learning\\R package\\Assignement 2\\funacka"
x <- readline()
x <- readline()
gsub("\\\\", "/", x)
gsub("\", "/", x)
x <- readline()
rf$
j
=
+=
==
)
"hyjkl"
x
x <- readline()
gsub("\\\", /, x)
gsub("\\\\", "/", x)
x
gsub("\\\\", "/", x)
x <- gsub("\\\\", "/", x)
setwd(x)
